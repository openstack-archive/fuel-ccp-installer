# All values can be overridden in CUSTOM_YAML
kube_network_plugin: "calico"
#Required for calico
kube_proxy_mode: "iptables"
kube_apiserver_insecure_port: "8080"
#Allow services to expose nodePorts in a wide range
kube_apiserver_node_port_range: "25000-50000"

#Configure calico to set --nat-outgoing, but not --ipip
ipip: false
nat_outgoing: true
calico_cni_version: "v1.5.6"
calico_cni_checksum: "9a6bd6da267c498a1833117777c069f44f720d23226d8459bada2a0b41cb8258"
calico_cni_ipam_checksum: "8d3574736df1ce10ea88fdec94d84dc58642081d3774d2d48249c6ee94ed316d"

#Raise number of concurrent DNS queries
dns_forward_max: 300

#Overridden component versions (different from Kargo upstream
#revision aaa3f1c4910ae23718bb6e3a0080b1af97575bac)
#Set kubernetes version
kube_version: "v1.5.3"
hyperkube_image_repo: "quay.io/coreos/hyperkube"
hyperkube_image_tag: "v1.5.3_coreos.0"
etcd_version: "v3.1.0"
#Download once, then push to nodes in batches, if enabled
download_run_once: true
#Enable netchecker app
deploy_netchecker: true

calico_version: "v1.0.2"

#Force calico CNI binaries to overwrite the ones copied from
#hyperkube while leaving other cni plugins intact
#overwrite_hyperkube_cni: true

# Custom (additional) DNS settings
# These go to hosts' /etc/resolv.conf, example:
#searchdomains:
#  - namespace.svc.cluster.local
nameservers:
  - 8.8.8.8

# These go to dnsmasq upstream servers, or /etc/resolv.conf, if dnsmasq skipped
upstream_dns_servers:
  - 8.8.4.4

# Configure how we tell pods how to find DNS. Upstream uses docker_dns, which
# breaks host k8s resolution. We are using host_resolvconf configuration which
# has some bugs when DHCP is enabled.
resolvconf_mode: host_resolvconf

# Continue deploying other hosts even if one failed
any_errors_fatal: false

# Tweak kubelet monitoring parameters to node/endpoint node flapping
kubelet_status_update_frequency: "20s"
kube_controller_node_monitor_grace_period: "2m"
kube_controller_node_monitor_period: "10s"
